{
    "If Statement": {
        "prefix": "if",
        "body": [
            "if ${1:condition}:",
            "\t$0",
            "end:"
        ],
        "description": "If statement"
    },
    "Else Statement": {
        "prefix": "else",
        "body": [
            "else:",
            "\t$0",
            "end:"
        ],
        "description": "Else statement"
    },
    "Else If Statement": {
        "prefix": "elif",
        "body": [
            "elif ${1:condition}:",
            "\t$0",
            "end:"
        ],
        "description": "Else If statement"
    },
    "Function Statement": {
        "prefix": "func",
        "body": [
            "func myFunction():",
            "\t$0",
            "end:"
        ],
        "description": "Function statement"
    },
    "Const": {
        "prefix": "const",
        "body": [
            "const"
        ]
    },
    "Var": {
        "prefix": "var",
        "body": [
            "var"
        ]
    },
    "getElement": {
        "prefix": "getElement"
    },
    "addElement": {
        "prefix": "addElement"
    },
    "ceateElement": {
        "prefix": "createElement"
    },
    "manageText": {
        "prefix": "manageText"
    },
    "Listener": {
        "prefix": "listener",
        "body": [
            "listener(\t$0)",
            "",
            "end::"
        ]
    },
    "Print": {
        "prefix": "print",
        "body": [
            "print($0)"
        ]
    },
    "Print err": {
        "prefix": "print",
        "body": [
            "print.err($0)"
        ]
    },
    "Print info": {
        "prefix": "print",
        "body": [
            "print.info($0)"
        ]
    },
    "Print trace": {
        "prefix": "print",
        "body": [
            "print.err($0)"
        ]
    },
    "Print warn": {
        "prefix": "print",
        "body": [
            "print.warn($0)"
        ]
    },
    "Print assert": {
        "prefix": "print",
        "body": [
            "print.assert($0)"
        ]
    },
    "Print debug": {
        "prefix": "print",
        "body": [
            "print.debug($0)"
        ]
    },
    "Touch": {
        "prefix": "touch",
        "body": [
            "touch"
        ]
    },
    "Ask": {
        "prefix": "ask",
        "body": [
            "ask"
        ]
    },
    "Confirm": {
        "prefix": "confirm",
        "body": [
            "confirm"
        ]
    },
    "Delay Function": {
        "prefix": "delay",
        "body": [
            "delay:",
            "\t$0",
            "end:1000:"
        ],
        "description": "Delay function"
    },
    "Repeat Function": {
        "prefix": "repeat",
        "body": [
            "repeat:",
            "\t$0",
            "end:1000:"
        ],
        "description": "Repeat function"
    },
    "For-to": {
        "prefix": "for",
        "body": [
            "for ${1:condition}=0 to 10:",
            "\t$0",
            "end:"
        ],
        "description": "For-to"
    },
    "For-in": {
        "prefix": "for",
        "body": [
            "for ${1:condition} in ${2:condition}::",
            "\t$0",
            "end:"
        ],
        "description": "For-in"
    },
    "For-of": {
        "prefix": "for",
        "body": [
            "for ${1:condition} of ${2:condition}:",
            "\t$0",
            "end:"
        ],
        "description": "For-of"
    },
    "Match": {
        "prefix": "match",
        "body": [
            "match ${1:condition:",
            "\t$0case ${2:condition:",
            "\t$0\t$0",
            "\t$0break:",
            "\t$0default:",
            "\t$0\t$0",
            "end:"
        ],
        "description": "Match function"
    },
    "Str": {
        "prefix": "str",
        "body": [
            "str"
        ]
    },
    "Num": {
        "prefix": "num",
        "body": [
            "num"
        ]
    },
    "Int": {
        "prefix": "int",
        "body": [
            "int"
        ]
    },
    "Class Definition": {
        "prefix": "class",
        "body": [
            "class ${1:name}:",
            "\t$0constructor(${parameters}):",
            "\t$0\t$0",
            "\t$0end:",
            "end:"
        ]
    }
}